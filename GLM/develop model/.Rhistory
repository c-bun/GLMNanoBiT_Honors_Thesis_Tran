#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_2$B1_2dMut <- (RAAM_2$B1_2/ RAAM_2$B1_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$B2_2dMut <- (RAAM_2$B2_2/ RAAM_2$B2_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$changeB2_B1 <- RAAM_2$B2_2dMut - RAAM_2$B1_2dMut
#binding
data_RAAM <- rbind(
select(RAAM_1, 'pos', 'mut', 'changeB2_B1'),
select(RAAM_2, 'pos', 'mut', 'changeB2_B1')
)
data_RAAM<- arrange(data_RAAM, pos)
data_RAAM$pos <- as.character(data_RAAM$pos)
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][44:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[45:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
#plot estimated contribution vs features
ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est)) +
geom_text(aes(label = alpha), size = 3)+
scale_fill_gradient2(midpoint= 0, na.value = 'white',high = 'darkgoldenrod1 ', low = 'cyan4', mid ='aliceblue')+
theme_classic() +
theme(axis.text.x = element_text(angle = 75, hjust=1), plot.subtitle = element_text(size = 10, color = "red", face = "bold"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated
Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
data_for_plot <- data_for_plot[!(data_for_plot$Pos %in% c(137, 138, 139, 140, 141, 142,144,146,147,150,151,152,153,154,156,158)), ]
heatmap <- ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est), width = 1, height = 1) +
geom_text(aes(label = alpha), size = 3) +
scale_fill_gradient2(midpoint= 0, na.value = 'white', high = 'darkgoldenrod1', low = 'cyan4', mid ='aliceblue') +
theme_classic() +
theme(text =element_text(size = 15),
# axis.text.x = element_text(angle = 75, hjust = 1),
plot.subtitle = element_text(size = 10, color = "red", face = "bold"),
aspect.ratio = 3/2,
# legend.text = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.title = element_text(angle = 90, vjust = 0.5, hjust = 0.5, size = 10),
legend.position =  c(1.2,0.5)) +
guides(fill = guide_colorbar(title.position = "left", title.hjust = 0.5, label.position = "left"))+
theme(legend.key.width = unit(0.25, "cm"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
heatmap
ggsave("heatmap_WT.png", heatmap, width = 6, height = 5, units = "in")
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][44:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[45:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(broom)
data_RAAM_raw <- read_csv("Data_AkrongAndMcGahan.csv")
#have to split for generalization later (correspond WT)
RAAM_1 <- data_RAAM_raw %>%
select(c(1, 2, 3, 6, 7, 8)) %>%
filter(library != 0, B1_1 != 0 | B2_1 != 0) %>% #remove rows that has library = 0 OR (b1 = 0 AND b2 = 0)
mutate_all(~ ifelse(. == 0, 0.1, .)) #change value=0 to 0.1
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_1$B1_1dMut <- (RAAM_1$B1_1/ RAAM_1$B1_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$B2_1dMut <- (RAAM_1$B2_1/ RAAM_1$B2_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$changeB2_B1 <- RAAM_1$B2_1dMut - RAAM_1$B1_1dMut
RAAM_2 <- data_RAAM_raw %>%
select(c(1, 4, 5, 6, 7, 8)) %>%
filter(library != 0, B1_2 != 0 | B2_2 != 0) %>%
mutate_all(~ ifelse(. == 0, 0.1, .))
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_2$B1_2dMut <- (RAAM_2$B1_2/ RAAM_2$B1_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$B2_2dMut <- (RAAM_2$B2_2/ RAAM_2$B2_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$changeB2_B1 <- RAAM_2$B2_2dMut - RAAM_2$B1_2dMut
#binding
data_RAAM <- rbind(
select(RAAM_1, 'pos', 'mut', 'changeB2_B1'),
select(RAAM_2, 'pos', 'mut', 'changeB2_B1')
)
data_RAAM<- arrange(data_RAAM, pos)
data_RAAM$pos <- as.character(data_RAAM$pos)
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][44:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[45:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
#plot estimated contribution vs features
ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est)) +
geom_text(aes(label = alpha), size = 3)+
scale_fill_gradient2(midpoint= 0, na.value = 'white',high = 'darkgoldenrod1 ', low = 'cyan4', mid ='aliceblue')+
theme_classic() +
theme(axis.text.x = element_text(angle = 75, hjust=1), plot.subtitle = element_text(size = 10, color = "red", face = "bold"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated
Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
data_for_plot <- data_for_plot[!(data_for_plot$Pos %in% c(137, 138, 139, 140, 141, 142,144,146,147,150,151,152,153,154,156,158)), ]
heatmap <- ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est), width = 1, height = 1) +
geom_text(aes(label = alpha), size = 3) +
scale_fill_gradient2(midpoint= 0, na.value = 'white', high = 'darkgoldenrod1', low = 'cyan4', mid ='aliceblue') +
theme_classic() +
theme(text =element_text(size = 15),
# axis.text.x = element_text(angle = 75, hjust = 1),
plot.subtitle = element_text(size = 10, color = "red", face = "bold"),
aspect.ratio = 3/2,
# legend.text = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.title = element_text(angle = 90, vjust = 0.5, hjust = 0.5, size = 10),
legend.position =  c(1.2,0.5)) +
guides(fill = guide_colorbar(title.position = "left", title.hjust = 0.5, label.position = "left"))+
theme(legend.key.width = unit(0.25, "cm"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
heatmap
ggsave("heatmap_WT.png", heatmap, width = 6, height = 5, units = "in")
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
fea
fea <- names(coef(gauss_model))[44:length(names(coef(gauss_model)))]      #get features' names
fea
fea <- names(coef(gauss_model))[44:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][43:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[44:483]        #to extract all including NA value
fea <- names(coef(gauss_model))[44:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][43:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[44:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(broom)
data_RAAM_raw <- read_csv("Data_AkrongAndMcGahan.csv")
#have to split for generalization later (correspond WT)
RAAM_1 <- data_RAAM_raw %>%
select(c(1, 2, 3, 6, 7, 8)) %>%
filter(library != 0, B1_1 != 0 | B2_1 != 0) %>% #remove rows that has library = 0 OR (b1 = 0 AND b2 = 0)
mutate_all(~ ifelse(. == 0, 0.1, .)) #change value=0 to 0.1
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_1$B1_1dMut <- (RAAM_1$B1_1/ RAAM_1$B1_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$B2_1dMut <- (RAAM_1$B2_1/ RAAM_1$B2_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$changeB2_B1 <- RAAM_1$B2_1dMut - RAAM_1$B1_1dMut
RAAM_2 <- data_RAAM_raw %>%
select(c(1, 4, 5, 6, 7, 8)) %>%
filter(library != 0, B1_2 != 0 | B2_2 != 0) %>%
mutate_all(~ ifelse(. == 0, 0.1, .))
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_2$B1_2dMut <- (RAAM_2$B1_2/ RAAM_2$B1_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$B2_2dMut <- (RAAM_2$B2_2/ RAAM_2$B2_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$changeB2_B1 <- RAAM_2$B2_2dMut - RAAM_2$B1_2dMut
#binding
data_RAAM <- rbind(
select(RAAM_1, 'pos', 'mut', 'changeB2_B1'),
select(RAAM_2, 'pos', 'mut', 'changeB2_B1')
)
data_RAAM<- arrange(data_RAAM, pos)
data_RAAM$pos <- as.character(data_RAAM$pos)
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
fea <- names(coef(gauss_model))[44:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][43:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[44:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
#plot estimated contribution vs features
ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est)) +
geom_text(aes(label = alpha), size = 3)+
scale_fill_gradient2(midpoint= 0, na.value = 'white',high = 'darkgoldenrod1 ', low = 'cyan4', mid ='aliceblue')+
theme_classic() +
theme(axis.text.x = element_text(angle = 75, hjust=1), plot.subtitle = element_text(size = 10, color = "red", face = "bold"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated
Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
data_for_plot <- data_for_plot[!(data_for_plot$Pos %in% c(137, 138, 139, 140, 141, 142,144,146,147,150,151,152,153,154,156,158)), ]
heatmap <- ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est), width = 1, height = 1) +
geom_text(aes(label = alpha), size = 3) +
scale_fill_gradient2(midpoint= 0, na.value = 'white', high = 'darkgoldenrod1', low = 'cyan4', mid ='aliceblue') +
theme_classic() +
theme(text =element_text(size = 15),
# axis.text.x = element_text(angle = 75, hjust = 1),
plot.subtitle = element_text(size = 10, color = "red", face = "bold"),
aspect.ratio = 3/2,
# legend.text = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.title = element_text(angle = 90, vjust = 0.5, hjust = 0.5, size = 10),
legend.position =  c(1.2,0.5)) +
guides(fill = guide_colorbar(title.position = "left", title.hjust = 0.5, label.position = "left"))+
theme(legend.key.width = unit(0.25, "cm"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
heatmap
ggsave("heatmap_WT.png", heatmap, width = 6, height = 5, units = "in")
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(broom)
data_RAAM_raw <- read_csv("Data_JuliAndEmma.csv")
#have to split for generalization later (correspond WT)
RAAM_1 <- data_RAAM_raw %>%
select(c(1, 2, 3, 6, 7, 8)) %>%
filter(library != 0, B1_1 != 0 | B2_1 != 0) %>% #remove rows that has library = 0 OR (b1 = 0 AND b2 = 0)
mutate_all(~ ifelse(. == 0, 0.1, .)) #change value=0 to 0.1
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_1$B1_1dMut <- (RAAM_1$B1_1/ RAAM_1$B1_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$B2_1dMut <- (RAAM_1$B2_1/ RAAM_1$B2_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$changeB2_B1 <- RAAM_1$B2_1dMut - RAAM_1$B1_1dMut
RAAM_2 <- data_RAAM_raw %>%
select(c(1, 4, 5, 6, 7, 8)) %>%
filter(library != 0, B1_2 != 0 | B2_2 != 0) %>%
mutate_all(~ ifelse(. == 0, 0.1, .))
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_2$B1_2dMut <- (RAAM_2$B1_2/ RAAM_2$B1_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$B2_2dMut <- (RAAM_2$B2_2/ RAAM_2$B2_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$changeB2_B1 <- RAAM_2$B2_2dMut - RAAM_2$B1_2dMut
#binding
data_RAAM <- rbind(
select(RAAM_1, 'pos', 'mut', 'changeB2_B1'),
select(RAAM_2, 'pos', 'mut', 'changeB2_B1')
)
data_RAAM<- arrange(data_RAAM, pos)
data_RAAM$pos <- as.character(data_RAAM$pos)
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
pos
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][43:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[44:483]        #to extract all including NA value
fea
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][43:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[44:483]        #to extract all including NA value
pos
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][44:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[45:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(broom)
data_RAAM_raw <- read_csv("Data_JuliAndEmma.csv")
#have to split for generalization later (correspond WT)
RAAM_1 <- data_RAAM_raw %>%
select(c(1, 2, 3, 6, 7, 8)) %>%
filter(library != 0, B1_1 != 0 | B2_1 != 0) %>% #remove rows that has library = 0 OR (b1 = 0 AND b2 = 0)
mutate_all(~ ifelse(. == 0, 0.1, .)) #change value=0 to 0.1
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_1$B1_1dMut <- (RAAM_1$B1_1/ RAAM_1$B1_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$B2_1dMut <- (RAAM_1$B2_1/ RAAM_1$B2_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$changeB2_B1 <- RAAM_1$B2_1dMut - RAAM_1$B1_1dMut
RAAM_2 <- data_RAAM_raw %>%
select(c(1, 4, 5, 6, 7, 8)) %>%
filter(library != 0, B1_2 != 0 | B2_2 != 0) %>%
mutate_all(~ ifelse(. == 0, 0.1, .))
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_2$B1_2dMut <- (RAAM_2$B1_2/ RAAM_2$B1_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$B2_2dMut <- (RAAM_2$B2_2/ RAAM_2$B2_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$changeB2_B1 <- RAAM_2$B2_2dMut - RAAM_2$B1_2dMut
#binding
data_RAAM <- rbind(
select(RAAM_1, 'pos', 'mut', 'changeB2_B1'),
select(RAAM_2, 'pos', 'mut', 'changeB2_B1')
)
data_RAAM<- arrange(data_RAAM, pos)
data_RAAM$pos <- as.character(data_RAAM$pos)
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
fea <- names(coef(gauss_model))[45:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][44:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[45:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
#plot estimated contribution vs features
ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est)) +
geom_text(aes(label = alpha), size = 3)+
scale_fill_gradient2(midpoint= 0, na.value = 'white',high = 'darkgoldenrod1 ', low = 'cyan4', mid ='aliceblue')+
theme_classic() +
theme(axis.text.x = element_text(angle = 75, hjust=1), plot.subtitle = element_text(size = 10, color = "red", face = "bold"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated
Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
data_for_plot <- data_for_plot[!(data_for_plot$Pos %in% c(137, 138, 139, 140, 141, 142,144,146,147,150,151,152,153,154,156,158)), ]
heatmap <- ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est), width = 1, height = 1) +
geom_text(aes(label = alpha), size = 3) +
scale_fill_gradient2(midpoint= 0, na.value = 'white', high = 'darkgoldenrod1', low = 'cyan4', mid ='aliceblue') +
theme_classic() +
theme(text =element_text(size = 15),
# axis.text.x = element_text(angle = 75, hjust = 1),
plot.subtitle = element_text(size = 10, color = "red", face = "bold"),
aspect.ratio = 3/2,
# legend.text = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.title = element_text(angle = 90, vjust = 0.5, hjust = 0.5, size = 10),
legend.position =  c(1.2,0.5)) +
guides(fill = guide_colorbar(title.position = "left", title.hjust = 0.5, label.position = "left"))+
theme(legend.key.width = unit(0.25, "cm"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
heatmap
ggsave("heatmap_WT.png", heatmap, width = 6, height = 5, units = "in")
# Convert pos to a factor with levels including "-1"
data_RAAM$pos <- as.factor(data_RAAM$pos)
data_RAAM$pos <- relevel(data_RAAM$pos, ref = "-1")
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
library(ggplot2)
library(dplyr)
library(readr)
library(tidyverse)
library(broom)
data_RAAM_raw <- read_csv("Data_AkrongAndMcGahan.csv")
#have to split for generalization later (correspond WT)
RAAM_1 <- data_RAAM_raw %>%
select(c(1, 2, 3, 6, 7, 8)) %>%
filter(library != 0, B1_1 != 0 | B2_1 != 0) %>% #remove rows that has library = 0 OR (b1 = 0 AND b2 = 0)
mutate_all(~ ifelse(. == 0, 0.1, .)) #change value=0 to 0.1
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_1$B1_1dMut <- (RAAM_1$B1_1/ RAAM_1$B1_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$B2_1dMut <- (RAAM_1$B2_1/ RAAM_1$B2_1[1])  / (RAAM_1$library/ RAAM_1$library[1])
RAAM_1$changeB2_B1 <- RAAM_1$B2_1dMut - RAAM_1$B1_1dMut
RAAM_2 <- data_RAAM_raw %>%
select(c(1, 4, 5, 6, 7, 8)) %>%
filter(library != 0, B1_2 != 0 | B2_2 != 0) %>%
mutate_all(~ ifelse(. == 0, 0.1, .))
#GENERALIZE
#formula: dMut = (Mut B1/ WT B1) / (Mut lib / WT lib)
RAAM_2$B1_2dMut <- (RAAM_2$B1_2/ RAAM_2$B1_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$B2_2dMut <- (RAAM_2$B2_2/ RAAM_2$B2_2[1])  / (RAAM_2$library/ RAAM_2$library[1])
RAAM_2$changeB2_B1 <- RAAM_2$B2_2dMut - RAAM_2$B1_2dMut
#binding
data_RAAM <- rbind(
select(RAAM_1, 'pos', 'mut', 'changeB2_B1'),
select(RAAM_2, 'pos', 'mut', 'changeB2_B1')
)
data_RAAM<- arrange(data_RAAM, pos)
data_RAAM$pos <- as.character(data_RAAM$pos)
# Convert pos to a factor with levels including "-1"
data_RAAM$pos <- as.factor(data_RAAM$pos)
data_RAAM$pos <- relevel(data_RAAM$pos, ref = "-1")
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
fea <- names(coef(gauss_model))[44:length(names(coef(gauss_model)))]      #get features' names
#split the features' names (e.g from "pos137:mutA" to "137" and "A")
mut <- list()
pos <- list ()
for (i in fea){
str_split <- strsplit(i, ":")
pos <- append(pos, substr(str_split[[1]][1], 4,6))    # e.g extract 137
mut <- append(mut, substr(str_split[[1]][2], 4,4))    # e.g extract A
}
est <- coef(gauss_model)[-1][43:length(coef(gauss_model)[-1])]          #get estimated contribution
#p <- coef(summary(gauss_model))[-1,4]         #get p-value
p <- tidy(gauss_model)$p.value[44:483]        #to extract all including NA value
#create data frame of pos, mut, estimated contribution, alpha
data_for_plot<- do.call(rbind, Map(data.frame, Pos=pos, Mut=mut, Est = est, p_value =p))
data_for_plot$alpha <- ifelse(data_for_plot$p_value<0.001,'***', ifelse(0.001 <data_for_plot$p_value & data_for_plot$p_value<0.01,'**', ifelse(0.01<data_for_plot$p_value& data_for_plot$p_value<0.05,'*', ifelse(0.05<data_for_plot$p_value& data_for_plot$p_value<0.1,'.', ' '))))
#plot estimated contribution vs features
ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est)) +
geom_text(aes(label = alpha), size = 3)+
scale_fill_gradient2(midpoint= 0, na.value = 'white',high = 'darkgoldenrod1 ', low = 'cyan4', mid ='aliceblue')+
theme_classic() +
theme(axis.text.x = element_text(angle = 75, hjust=1), plot.subtitle = element_text(size = 10, color = "red", face = "bold"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated
Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
data_for_plot <- data_for_plot[!(data_for_plot$Pos %in% c(137, 138, 139, 140, 141, 142,144,146,147,150,151,152,153,154,156,158)), ]
heatmap <- ggplot(data_for_plot, aes(x = Pos, y = Mut)) +
geom_tile(aes(fill = Est), width = 1, height = 1) +
geom_text(aes(label = alpha), size = 3) +
scale_fill_gradient2(midpoint= 0, na.value = 'white', high = 'darkgoldenrod1', low = 'cyan4', mid ='aliceblue') +
theme_classic() +
theme(text =element_text(size = 15),
# axis.text.x = element_text(angle = 75, hjust = 1),
plot.subtitle = element_text(size = 10, color = "red", face = "bold"),
aspect.ratio = 3/2,
# legend.text = element_text(angle = 0, vjust = 1, hjust = 0.5),
legend.title = element_text(angle = 90, vjust = 0.5, hjust = 0.5, size = 10),
legend.position =  c(1.2,0.5)) +
guides(fill = guide_colorbar(title.position = "left", title.hjust = 0.5, label.position = "left"))+
theme(legend.key.width = unit(0.25, "cm"))+
labs(y = "Mutation Amino Acid", x = "Enzyme Position", fill= 'Estimated Contribution', subtitle = 'Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1')
heatmap
ggsave("heatmap_WT.png", heatmap, width = 6, height = 5, units = "in")
### automatically úed pó = 136 as the reference for the regresssion.
gauss_model <- glm( changeB2_B1 ~ pos * mut , data = data_RAAM, family = 'gaussian')
#options(max.print=10000)    #set limit to print the output
summary(gauss_model)
